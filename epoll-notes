#include <sys/socket.h>
#include<errno.h>
#include<netinet/in.h>
#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<pthread.h>
#include<sys/poll.h>
#include<sys/epoll.h>

int main()

    {   //创建一个套接字：int sockfd = socket(AF_INET, SOCK_STREAM, 0);
        // socket 函数用于创建一个新的套接字。它的参数有以下含义：

        // AF_INET：表示使用 IPv4 协议。
        // SOCK_STREAM：表示创建一个基于流的套接字，即 TCP 套接字。
        // 0：表示使用默认的协议号。
        int sockfd = socket(AF_INET, SOCK_STREAM, 0);

        struct sockaddr_in serveraddr;
        memset(&serveraddr, 0, sizeof(struct sockaddr_in));

        // sin_family 字段表示套接字地址的协议类型，这里设置为 IPv4。

        // sin_addr.s_addr 字段表示套接字地址的 IP 地址部分，这里设置为 INADDR_ANY，表示绑定到所有本地接口。

        // sin_port 字段表示套接字地址的端口号，这里设置为 2048。

        // htons 和 htonl 函数用于将主机字节序转换为网络字节序。

        serveraddr.sin_family = AF_INET;
        serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
        serveraddr.sin_port = htons(2048);

        if (-1 == bind(sockfd,(struct sockaddr*)&serveraddr, sizeof(struct sockaddr)))
        {
            perror("bind");
            return -1;
        }

        listen(sockfd, 10);

#if 0
        struct pollfd fds[1024] = {0};

        fds[sockfd].fd = sockfd;
        fds[sockfd].events = POLLIN;

        int maxfd = sockfd;

        while(1){

            int nready = poll(fds,maxfd+1,-1);

            if(fds[sockfd].revents & POLLIN)
            {
                struct sockaddr_in clientaddr;
                socklen_t len = sizeof(clientaddr);
                int clientfd = accept(sockfd,(struct sockaddr*)&clientaddr, &len);
                printf("sockfd: %d\n", clientfd);

                fds[clientfd].fd = clientfd;
                fds[clientfd].events = POLLIN;

                maxfd = clientfd;
            }

            int i = 0;
            for (i = sockfd+1 ; i<=maxfd; i++)
            {
                if (fds[i].revents & POLLIN)
                {
                    char buffer[128] = {0};
                    int count = recv(i, buffer, 128, 0);

                    if(count ==0)
                    {
                        printf("disconnected\n");
                        fds[i].fd = -1;
                        fds[i].events = 0;

                        close(i);

                        break;
                    }

                }
            }

        }

    #else
        int epfd = epoll_create(1); //1这个参数没啥用，只是为了兼容旧的版本
        
        //创建了一个epoll_event结构体ev，并将其设置为监听sockfd套接字的读事件，然后将ev添加到epfd表示的epoll实例中
        struct epoll_event ev;
        ev.events = EPOLLIN;
        ev.data.fd = sockfd;

        epoll_ctl(epfd, EPOLL_CTL_ADD, sockfd, &ev); //which box, the method, which socket, and events
        
        //代码定义了一个epoll_event数组events，用于存储epoll_wait函数返回的事件
        struct epoll_event events[1024] = {0};

        while(1)
        {
            int nready = epoll_wait(epfd, events, 1024,-1 ); //调用epoll_wait函数等待事件的发生。如果有事件发生，那么epoll_wait函数将返回发生的事件数量，并将这些事件存储在events数组中

            int i = 0;
            for (int i = 0; i < nready; i++)
            {
                int connfd = events[i].data.fd; //获取当前事件对应的文件描述符
                if (sockfd ==connfd) //检查当前事件是否是新的客户端连接请求
                {

                //接受了新的客户端连接请求，并返回了一个新的文件描述符clientfd
                struct sockaddr_in clientaddr;
                socklen_t len = sizeof(clientaddr);
                int clientfd = accept(sockfd,(struct sockaddr*)&clientaddr, &len);

                //将新的客户端连接添加到epfd表示的epoll实例中
                ev.events = EPOLLIN | EPOLLET;
                ev.data.fd = clientfd;
                epoll_ctl(epfd, EPOLL_CTL_ADD, clientfd, &ev);
                printf("clientfd: %d\n", clientfd);

                //检查当前事件是否是数据可读事件
                }else if (events[i].events & EPOLLIN){

                    char buffer[128] ={0};

                    //从当前连接接收数据，并返回接收到的字节数。
                    int count = recv(connfd, buffer, 128, 0);
                    if (count ==0){
                        printf("disconnected\n");

                        epoll_ctl(epfd, EPOLL_CTL_DEL, connfd, NULL);                        
                        close(i);

                        continue;

                    }

                    send(connfd, buffer, count, 0);
                    printf("clientfd: %d, count: %d, buffer: %s\n", i, count, buffer);

                }
            }
        }


    #endif
            getchar();

        

    }
